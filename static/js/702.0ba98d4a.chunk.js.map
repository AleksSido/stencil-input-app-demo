{"version":3,"file":"static/js/702.0ba98d4a.chunk.js","mappings":"sNASA,IAEMA,EAAY,WAChB,WAAYC,GAAS,4BACnBC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,WAAYC,EAAAA,EAAAA,GAAYF,KAAM,YAAa,GAChDA,KAAKG,wBAA0B,CAC7BC,IAAK,CACHC,QAAS,8BACTC,aAAc,sBACdC,aAAc,cAGlBP,KAAKQ,KAAO,QACZR,KAAKS,KAAO,OACZT,KAAKU,SAAU,EACfV,KAAKW,WAAY,EACjBX,KAAKY,cAAgB,KACrBZ,KAAKa,WAAa,WAAQ,EAAKF,WAAY,CAAO,EAClDX,KAAKc,WAAa,SAACC,GACjB,IAAMC,EAAQD,EAAME,OAAOD,MAC3B,EAAKN,SAAU,EAAKE,eAAgB,EAAKA,cAAcM,KAAKF,GAC5D,EAAKf,UAAUkB,KAAK,CAAEH,MAAAA,EAAON,QAAS,EAAKA,SAC5C,CACF,CAtBe,gDAuBhB,WACEV,KAAKY,cAAgBZ,KAAKoB,kBAAoB,IAAIC,OAAOrB,KAAKoB,mBAC5DpB,KAAKG,wBAAwBH,KAAKS,MAChC,IAAIY,OAAOrB,KAAKG,wBAAwBH,KAAKS,MAAMJ,SAAW,IACnE,GA3Be,oBA4BhB,WACE,IAAMiB,EAAUtB,KAAKsB,QAAUtB,KAAKsB,QAtCxC,SAAsBC,GACpB,IAAMC,EAAgBD,GAA0B,GAC5CE,EAAIC,KAAKC,MAEb,OAAOH,EADHI,KAAKC,MAAMJ,EAAIG,KAAKE,SAEzB,CAiCiDC,CAAa,SACrDC,EAAuBhC,KAAKW,UAChCX,KAAKU,QAAU,oBAAsB,oBADO,QAExCuB,EAAiBjC,KAAKQ,KAAL,UAAewB,EAAf,kBAA4ChC,KAAKQ,MAASwB,EAC3EE,EAA6BlC,KAAKW,UACtCX,KAAKU,QAAU,4CAA8C,4CADX,oBAEpD,OAAQyB,EAAAA,EAAAA,GAAEC,EAAAA,EAAM,KAAMpC,KAAKqC,OAASF,EAAAA,EAAAA,GAAE,QAAS,CAAEG,QAAShB,EAASiB,MAAO,SAAWvC,KAAKqC,OAAU,MAAMF,EAAAA,EAAAA,GAAE,QAAS,CAAEK,GAAIlB,EAASiB,MAAON,EAAgBxB,KAAMT,KAAKS,KAAMgC,QAASzC,KAAKc,WAAY4B,OAAQ1C,KAAKa,WAAY8B,YAAa3C,KAAK2C,eAAgBR,EAAAA,EAAAA,GAAE,MAAO,CAAEI,MAAOL,GAA8BlC,KAAKW,UACpTX,KAAKU,QAAUV,KAAKG,wBAAwBH,KAAKS,MAAMF,aACnDP,KAAKG,wBAAwBH,KAAKS,MAAMH,aAFoR,IAGnU,KAtCe,KAwClBT,EAAa+C,MA1CW,yoB","sources":["../../components-kit/stencil-components/dist/esm/stencil-input.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host } from './index-7de24c10.js';\n\nfunction getUniqueKey(baseString) {\r\n  const keyBaseString = baseString ? baseString : '';\r\n  let d = Date.now();\r\n  d = Math.floor(d * Math.random());\r\n  return keyBaseString + d;\r\n}\n\nconst stencilInputCss = \":host{display:block}.input{display:block;border-radius:0;border:1px solid #4e4e4e;color:#4e4e4e;font-size:16px;height:40px;line-height:40px;padding:0 8px}.input:focus{outline:unset}.input,.input.input_small{width:160px}.input.input_medium{width:320px}.input.input_large{width:480px}.input.input_full{width:100%}.input.input_error{border:1px solid #d30038;background-color:rgba(211, 0, 56, 0.05)}.input.input_valid{border:1px solid #04AA6D}.validation-status{height:16px;line-height:16px;font-size:12px}.validation-status_error{color:#d30038}.validation-status_valid{color:#04AA6D}.label{display:block;font-size:16px;line-height:24px;color:#4e4e4e}\";\n\nconst StencilInput = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.userInput = createEvent(this, \"userInput\", 7);\r\n    this.defaultValidationScheme = {\r\n      url: {\r\n        pattern: '^(ftp|http|https):\\/\\/[^ \"]+$',\r\n        errorMessage: 'Fill in a valid URL',\r\n        validMessage: 'Valid URL'\r\n      }\r\n    };\r\n    this.size = \"small\";\r\n    this.type = \"text\";\r\n    this.isValid = true;\r\n    this.isTouched = false;\r\n    this.patternRegExp = null;\r\n    this.handleBlur = () => { this.isTouched = true; };\r\n    this.inputTyped = (event) => {\r\n      const value = event.target.value;\r\n      this.isValid = this.patternRegExp ? this.patternRegExp.test(value) : true;\r\n      this.userInput.emit({ value, isValid: this.isValid });\r\n    };\r\n  }\r\n  componentWillLoad() {\r\n    this.patternRegExp = this.validationPattern ? new RegExp(this.validationPattern) :\r\n      this.defaultValidationScheme[this.type] ?\r\n        new RegExp(this.defaultValidationScheme[this.type].pattern) : null;\r\n  }\r\n  render() {\r\n    const inputId = this.inputId ? this.inputId : getUniqueKey(\"input\");\r\n    const inputErrorClassName = !this.isTouched ? \"input\" :\r\n      this.isValid ? \"input input_valid\" : \"input input_error\";\r\n    const inputClassName = this.size ? `${inputErrorClassName} input_${this.size}` : inputErrorClassName;\r\n    const validationStatusClassName = !this.isTouched ? \"validation-status\" :\r\n      this.isValid ? \"validation-status validation-status_valid\" : \"validation-status validation-status_error\";\r\n    return (h(Host, null, this.label ? (h(\"label\", { htmlFor: inputId, class: \"label\" }, this.label)) : null, h(\"input\", { id: inputId, class: inputClassName, type: this.type, onInput: this.inputTyped, onBlur: this.handleBlur, placeholder: this.placeholder }), h(\"div\", { class: validationStatusClassName }, !this.isTouched ? \"\" :\r\n      this.isValid ? this.defaultValidationScheme[this.type].validMessage\r\n        : this.defaultValidationScheme[this.type].errorMessage)));\r\n  }\r\n};\r\nStencilInput.style = stencilInputCss;\n\nexport { StencilInput as stencil_input };\n"],"names":["StencilInput","hostRef","registerInstance","this","userInput","createEvent","defaultValidationScheme","url","pattern","errorMessage","validMessage","size","type","isValid","isTouched","patternRegExp","handleBlur","inputTyped","event","value","target","test","emit","validationPattern","RegExp","inputId","baseString","keyBaseString","d","Date","now","Math","floor","random","getUniqueKey","inputErrorClassName","inputClassName","validationStatusClassName","h","Host","label","htmlFor","class","id","onInput","onBlur","placeholder","style"],"sourceRoot":""}